@page "/resources"
@using GemNote.Web.Components
@using GemNote.Web.Services.Contracts
@using GemNote.Web.States
@using GemNote.Web.ViewModels.ResourceModels
@using System.Net
@using Newtonsoft.Json

@inject IDialogService DialogService
@inject INotebookService NotebookService
@inject UserState UserState
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Resources</PageTitle>

<div class="container">
	<div class="page-title">
		<FluentLabel Typo="Typography.PageTitle">Resources</FluentLabel>
	</div>
	<div class="content">
		@if (_isLoading)
		{
			<FluentStack Orientation="Orientation.Horizontal">
				<FluentLabel Typo="Typography.H5">
					Loading resources...
				</FluentLabel>
				<FluentProgressRing></FluentProgressRing>
			</FluentStack>
		}
		else if (Notebooks == null || !Notebooks.Any())
		{
			<FluentLabel Typo="Typography.H5">
				You don't have any notebooks yet. Create one now!
			</FluentLabel>
		}
		else
		{
			<div class="top-bar">
				<FluentLabel Typo="Typography.H5" Class="top-label">
					You have @Notebooks.Count() notebooks.
				</FluentLabel>
				<FluentButton IconStart="@(new Icons.Regular.Size16.AddSquareMultiple())"
				              Appearance="Appearance.Accent"
							  Class="top-btn"
							  OnClick="CreateNewNotebook">
					Create new notebook
				</FluentButton>
			</div>

			@foreach (var notebook in Notebooks)
			{
				<NotebookComponent Notebook="notebook"/>
			}
		}
	</div>
</div>

@code {
	private IEnumerable<NotebookVm>? Notebooks { get; set; } = new List<NotebookVm>();
	private bool _isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		if (!UserState.IsAuthenticated)
		{
			NavigationManager.NavigateTo("/unauthorized");
			return;
		}

		var userId = UserState.UserId;
		var (response, statusCode) = await NotebookService.GetNotebooksByUserIdAsync(userId!);

		switch (statusCode)
		{
			case HttpStatusCode.Unauthorized:
				await DialogService.ShowErrorAsync("You are not authorized to access this page.");
				NavigationManager.NavigateTo("/");
				break;
			case HttpStatusCode.Forbidden:
				await DialogService.ShowErrorAsync("You are not allowed to access this page.");
				NavigationManager.NavigateTo("/");
				break;
		}

		// Update UI based on response
		if (response.IsSucceed)
		{
			Notebooks = JsonConvert.DeserializeObject<List<NotebookVm>>(response.Data!.ToString()!) ?? [];
		}
		else
		{
			Notebooks = new List<NotebookVm>();
		}

		_isLoading = false;
	}

	private void CreateNewNotebook()
	{
		ToastService.ShowInfo("Create new notebook");
	}

}