@page "/register"
@using GemNote.Web.ViewModels
@using GemNote.Web.ViewModels.RequestModels
@using GemNote.Web.Services.Contracts

@inject IAuthService AuthService
@inject IDialogService DialogService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Sign up</PageTitle>

<div style="width: 80%; margin: auto;">

	<FluentLabel Typo="Typography.PageTitle">Sign up</FluentLabel>

	<FluentCard 
		AreaRestricted="false"
		Style="margin: 20px 0; padding: 16px; width: 400px; height: auto;">
		<FluentLabel Style="margin-bottom: 1rem">
			Let's get you all set up!
		</FluentLabel>

		<EditForm Model="@Request" OnValidSubmit="ValidHandlerAsync" FormName="register_entry">

			<FluentTextField
				Name="email"
				Label="Email"
				@bind-Value="@Request.Email"
				Style="width: 100%"
				TextFieldType="TextFieldType.Email"
				Placeholder="john.doe@example.com"
				Required="true"
				Spellcheck="true"/>
			
			<FluentTextField
				Name="password"
				Label="Password"
				Style="width: 100%"
				TextFieldType="TextFieldType.Password" 
				Placeholder="●●●●●●●●"
				@bind-Value="@Request.Password"
				Required="true"/>

			<FluentTextField
				Name="first_name"
				Label="First name"
				@bind-Value="@Request.FirstName"
				Style="width: 100%"
				Placeholder="John"
				Required/>

			<FluentTextField
				Name="last_name"
				Label="Last name"
				@bind-Value="@Request.LastName"
				Style="width: 100%"
				Placeholder="Doe"
				Required="true"/>

			<FluentSelect
				Name="language"
				TOption="Country"
				Items="Countries"
				Label="Select your language"
				Width="100%"
				Height="200px"
				OptionValue="@(c => c.Code)"
				OptionText="@(c => c.Name)"
				@bind-value="@Request.Language"
				@bind-SelectedOption="@Country">
			</FluentSelect>

			<FluentSpacer/>

			<FluentStack>
				<FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="margin-top: 1rem;">Sign up</FluentButton>
			</FluentStack>
		</EditForm>
	</FluentCard>
</div>

@code {
	private RegisterRequest Request { get; set; } = new();
	private IEnumerable<Country> Countries { get; set; } = Country.All;
	private Country Country { get; set; }

	protected override void OnInitialized()
	{
		Country = Countries.FirstOrDefault(c => c.Code == "vn")!;
	}

	private async Task ValidHandlerAsync()
	{
		var authResponse = await AuthService.RegisterAsync(Request);
		if (!authResponse.IsSucceed)
		{
			foreach (var error in authResponse.ErrorMessages)
			{
				ToastService.ShowError(error);
			}
			return;
		}
		ToastService.ShowSuccess("Sign up successful!");
		NavigationManager.NavigateTo("/");
	}
}