@page "/register"
@using GemNote.Web.ViewModels
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@inject IDialogService DialogService
@inject IToastService ToastService

<PageTitle>New user</PageTitle>


<div style="width: 80%; margin: auto;">

	<FluentLabel Typo="Typography.PageTitle">Sign up</FluentLabel>

	<FluentCard 
		AreaRestricted="false"
		Style="margin: 20px 0; padding: 16px; width: 400px; height: auto;">
		<FluentLabel Style="margin-bottom: 1rem">
			Let's get you all set up!
		</FluentLabel>

		<EditForm Model="@User" OnValidSubmit="ValidHandlerAsync">

			<FluentTextField
				Label="Email"
				@bind-Value="@User.Email"
				Style="width: 100%"
				TextFieldType="TextFieldType.Email"
				Placeholder="john.doe@example.com"
				Required="true"
				Spellcheck="true"/>
			
			<FluentTextField
				Label="Password"
				Style="width: 100%"
				TextFieldType="TextFieldType.Password" 
				Placeholder="*******"
				Required="true"/>

			<FluentTextField
				Label="First name"
				@bind-Value="@User.FirstName"
				Style="width: 100%"
				Placeholder="John"
				Required/>

			<FluentTextField
				Label="Last name"
				@bind-Value="@User.LastName"
				Style="width: 100%"
				Placeholder="Doe"
				Required="true"/>

			<FluentSelect
				TOption="Country"
				Items="Countries"
				Label="Select your language"
				Width="100%"
				Height="200px"
				OptionValue="@(c => c.Code)"
				OptionText="@(c => c.Name)"
				@bind-value="@User.Language"
				@bind-SelectedOption="@Country">
			</FluentSelect>

			<FluentSpacer/>

			<FluentStack>
				<FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="margin-top: 1rem;">Sign up</FluentButton>
			</FluentStack>
		</EditForm>
	</FluentCard>
</div>

@code {
	private RegisterUser User { get; set; } = new();
	private IEnumerable<Country> Countries { get; set; } = Country.All;
	private Country Country { get; set; } = null;

	private async Task ValidHandlerAsync()
	{
		await Task.Delay(1000);
		await DialogService.ShowSuccessAsync("Registration successful", "Success");
		ToastService.ShowSuccess($"User's language: {User.Language}");
	}

	public class RegisterUser
	{
		[Required]
		[EmailAddress(ErrorMessage = "Email is not valid.")]
		public string? Email { get; set; }

		[Required]
		[MinLength(8, ErrorMessage = "Password has to be at least 8 characters long.")]
		public string? Password { get; set; }

		[Required]
		[MinLength(3, ErrorMessage = "First name is too short!")]
		[StringLength(16, ErrorMessage = "First name too long (16 character limit).")]
		public string? FirstName { get; set; }

		[Required]
		[MinLength(3, ErrorMessage = "Last name is too short!")]
		[StringLength(16, ErrorMessage = "Last name too long (16 character limit).")]
		public string? LastName { get; set; }

		public string? Language { get; set; }
	}

}