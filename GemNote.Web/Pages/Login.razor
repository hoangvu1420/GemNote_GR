@page "/login"
@using GemNote.Web.ViewModels.RequestModels
@using GemNote.Web.ViewModels
@using GemNote.Web.Services.Contracts

@inject IAuthService AuthService
@inject IDialogService DialogService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<style>
	.container {
		width: 80%;
		height: 88vh;
		margin: auto;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.card {
		margin: 50px 0;
		padding: 16px;
		width: 70%;
		height: 80%;
		display: flex;
		flex-direction: row;
	}

	.image-box {
		margin-right: 1rem;
		display: flex;
		justify-content: center;
		align-items: center;
		flex-shrink: 0;
	}

		.image-box > img {
			height: 100%;
			width: auto;
			border-radius: 5px;
		}

	.form-box {
		flex-grow: 1;
		margin-left: 1rem;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
</style>

<div class="container">

	<FluentCard AreaRestricted="false" Class="card">
		<div class="image-box">
			<img src="images/greencard.png" alt="gem card image"/>
		</div>
		<div class="form-box">
			<FluentLabel Typo="Typography.PageTitle" Style="align-self: center;">Log in</FluentLabel>
			<FluentLabel Style="margin-bottom: 1rem; margin-top: 0.5rem;">
				Log in with your email and password or <FluentAnchor Href="register" Appearance="Appearance.Hypertext">sign up</FluentAnchor>
			</FluentLabel>

			<EditForm Model="@Request" OnValidSubmit="ValidHandlerAsync" FormName="register_entry" novalidate>
				<DataAnnotationsValidator/>

				<FluentTextField Name="email"
				                 Label="Email"
				                 @bind-Value="@Request.Email"
				                 Style="width: 100%"
				                 TextFieldType="TextFieldType.Email"
				                 Placeholder="john.doe@example.com"
				                 Required="true">
					<FluentIcon Value="@(new Icons.Regular.Size16.Person())" Slot="start" Color="Color.Neutral"/>
				</FluentTextField>
				<FluentValidationMessage For="@(() => Request.Email)"/>

				<FluentTextField Name="password"
				                 Label="Password"
				                 Style="width: 100%"
				                 TextFieldType="TextFieldType.Password"
				                 Placeholder="●●●●●●●●"
				                 @bind-Value="@Request.Password"
				                 Required="true">
					<FluentIcon Value="@(new Icons.Regular.Size16.Password())" Slot="start" Color="Color.Neutral"/>
				</FluentTextField>
				<FluentValidationMessage For="@(() => Request.Password)"/>

				<FluentCheckbox Name="remember-me" @bind-Value="_isRememberMe" Label="Remember me" Style="margin-top: 0.5rem;"/>

				<FluentStack Orientation="Orientation.Horizontal" Style="margin-top: 1rem;">
					<FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Disabled="_isLoading">Log in</FluentButton>
					<FluentProgressRing Visible="_isLoading"></FluentProgressRing>
				</FluentStack>
			</EditForm>
		</div>
	</FluentCard>

</div>

@code {
	[SupplyParameterFromForm] private LoginRequest Request { get; set; } = new();
	private bool _isRememberMe;
	private bool _isLoading;

	private async Task ValidHandlerAsync()
	{
		_isLoading = true;
		var loginResponse = await AuthService.LoginAsync(Request, _isRememberMe);
		if (!loginResponse.IsSucceed)
		{
			foreach (var error in loginResponse.ErrorMessages)
			{
				ToastService.ShowError(error);
			}

			_isLoading = false;
			return;
		}

		_isLoading = false;
		NavigationManager.NavigateTo("/");
	}

}