@page "/login"
@using GemNote.Web.ViewModels.RequestModels
@using GemNote.Web.ViewModels
@using GemNote.Web.Services.Contracts

@inject IAuthService AuthService
@inject IDialogService DialogService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<style>
	.row-container {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.row-subcontainer {
		margin: auto;
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.card-container {
		height: 90vh;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	.card {
		height: fit-content;
		width: fit-content;
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.form-img {
		height: 100%;
		max-height: 60vh;
		width: auto;
		border-radius: 5px;
	}

	.form-box {
		flex-grow: 1;
		margin-left: 1rem;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
</style>

<FluentGrid AdaptiveRendering="true" Justify="JustifyContent.Center" Class="grid-container">
	<FluentGridItem xs="12" sm="7" Class="row-container">
		<div class="card-container">
			<FluentCard AreaRestricted="false" Class="card">
				<FluentGrid AdaptiveRendering="true" Justify="JustifyContent.Center" Class="grid-container">
					<FluentGridItem xs="12" sm="7" HiddenWhen="GridItemHidden.XsAndDown" Class="row-subcontainer">
						<img class="form-img" src="images/greencard.png" alt="gem card image"/>
					</FluentGridItem>
					<FluentGridItem xs="12" sm="5" Class="row-subcontainer">
						<div class="form-box">
							<FluentLabel Typo="Typography.PageTitle" Style="align-self: center;">Log in</FluentLabel>
							<FluentLabel Style="margin-bottom: 1rem; margin-top: 0.5rem;">
								Log in with your email and password or <FluentAnchor Href="register" Appearance="Appearance.Hypertext">sign up</FluentAnchor>
							</FluentLabel>

							<EditForm Model="@Request" OnValidSubmit="ValidHandlerAsync" FormName="register_entry" novalidate>
								<DataAnnotationsValidator/>

								<FluentTextField id="email"
								                 Name="email"
								                 Label="Email"
								                 @bind-Value="@Request.Email"
								                 Style="width: 100%"
								                 TextFieldType="TextFieldType.Email"
								                 Placeholder="john.doe@example.com"
								                 Required="true">
									<FluentIcon Value="@(new Icons.Regular.Size16.Person())" Slot="start" Color="Color.Neutral"/>
								</FluentTextField>
								<FluentValidationMessage For="@(() => Request.Email)"/>

								<FluentTextField id="password"
								                 Name="password"
								                 Label="Password"
								                 Style="width: 100%"
								                 TextFieldType="TextFieldType.Password"
								                 Placeholder="●●●●●●●●"
								                 @bind-Value="@Request.Password"
								                 Required="true">
									<FluentIcon Value="@(new Icons.Regular.Size16.Password())" Slot="start" Color="Color.Neutral"/>
								</FluentTextField>
								<FluentValidationMessage For="@(() => Request.Password)"/>

								<FluentCheckbox Name="remember-me" @bind-Value="_isRememberMe" Label="Remember me" Style="margin-top: 0.5rem;"/>

								<FluentStack Orientation="Orientation.Horizontal" Style="margin-top: 1rem;">
									<FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Disabled="_isLoading">Log in</FluentButton>
									<FluentProgressRing Visible="_isLoading"></FluentProgressRing>
								</FluentStack>
							</EditForm>
						</div>
					</FluentGridItem>
				</FluentGrid>
			</FluentCard>
		</div>
	</FluentGridItem>
</FluentGrid>

@code {
	[SupplyParameterFromForm] private LoginRequest Request { get; set; } = new();
	private bool _isRememberMe;
	private bool _isLoading;

	private async Task ValidHandlerAsync()
	{
		_isLoading = true;
		var loginResponse = await AuthService.LoginAsync(Request, _isRememberMe);
		if (!loginResponse.IsSucceed)
		{
			foreach (var error in loginResponse.ErrorMessages)
			{
				ToastService.ShowError(error);
			}

			_isLoading = false;
			return;
		}

		_isLoading = false;
		NavigationManager.NavigateTo("/");
	}

}