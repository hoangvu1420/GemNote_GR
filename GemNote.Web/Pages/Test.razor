@page "/test"

<PageTitle>Test</PageTitle>

@inject IDialogService DialogService
@inject IToastService ToastService

@inject IKeyCodeService KeyCodeService
@implements IAsyncDisposable

<style>
	.full-width,
	.full-width fluent-card {
		width: 600px;
		height: 300px;
		cursor: pointer;
		transition: background-color 0.5s ease-in-out;
	}

		.full-width fluent-card:hover {
			background-color: #373A40;
		}

	fluent-card {
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.key-code {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;

		border: 1px solid #ccc;
		padding: 10px;
	}

	li > span {
		float: left;
		width: 70px;
		font-weight: bold;
	}
</style>

<FluentStack>
	<div class="key-code">
		<FluentHorizontalScroll
			@ref="_horizontalScroll"
			class="full-width" Speed="1000"
			Easing="ScrollEasing.EaseInOut">

			<FluentCard Id="card1">
				<FluentLabel Typo="Typography.Header">
					Card 1
				</FluentLabel>
			</FluentCard>
			<FluentCard Id="card2">
				<FluentLabel Typo="Typography.Header">
					Card 2
				</FluentLabel>
			</FluentCard>
			<FluentCard Id="card3">
				<FluentLabel Typo="Typography.Header">
					Card 3
				</FluentLabel>
			</FluentCard>
			<FluentCard Id="card4">
				<FluentLabel Typo="Typography.Header">
					Card 4
				</FluentLabel>
			</FluentCard>
			<FluentCard Id="card5">
				<FluentLabel Typo="Typography.Header">
					Card 5
				</FluentLabel>
			</FluentCard>
		</FluentHorizontalScroll>
	</div>

	<ul>
		<li>
			<span>Value:</span> <code>@LastKeyCode?.Value</code>
		</li>
		<li>
			<span>Key:</span> <code>@LastKeyCode?.Key.ToString()</code>
		</li>
		<li>
			<span>Code:</span> <code>@LastKeyCode?.KeyCode</code>
		</li>
		<li>
			<span>Meta:</span>
			@if (LastKeyCode?.ShiftKey == true)
			{
				<FluentIcon Value="@(new Icons.Filled.Size20.KeyboardShift())"/>
			}
			else
			{
				<FluentIcon Value="@(new Icons.Regular.Size20.KeyboardShift())" Color="Color.Neutral"/>
			}
			@if (LastKeyCode?.CtrlKey == true)
			{
				<FluentIcon Value="@(new Icons.Filled.Size20.ControlButton())"/>
			}
			else
			{
				<FluentIcon Value="@(new Icons.Regular.Size20.ControlButton())" Color="Color.Neutral"/>
			}
			@if (LastKeyCode?.AltKey == true)
			{
				<FluentIcon Value="@(new Icons.Filled.Size20.KeyCommand())"/>
			}
			else
			{
				<FluentIcon Value="@(new Icons.Regular.Size20.KeyCommand())" Color="Color.Neutral"/>
			}
			@if (LastKeyCode?.MetaKey == true)
			{
				<FluentIcon Value="@(new Icons.Filled.Size20.ArrowBounce())"/>
			}
			else
			{
				<FluentIcon Value="@(new Icons.Regular.Size20.ArrowBounce())" Color="Color.Neutral"/>
			}
		</li>
		<li>
			<span>Location:</span> <code>@LastKeyCode?.Location.ToString()</code>
		</li>
		<li>
			<span>TargetId:</span> <code>@LastKeyCode?.TargetId</code>
		</li>
	</ul>
</FluentStack>

@code
{
	FluentKeyCodeEventArgs? LastKeyCode;
	FluentHorizontalScroll _horizontalScroll = default!;

	protected override void OnInitialized()
	{
		KeyCodeService.RegisterListener(OnKeyDownAsync);
	}

	private Task OnKeyDownAsync(FluentKeyCodeEventArgs key)
	{
		LastKeyCode = key;
		StateHasChanged();
		switch (key.KeyCode)
		{
			case 39:
				_horizontalScroll.ScrollToNext();
				break;
			case 37:
				_horizontalScroll.ScrollToPrevious();
				break;
		}

		return Task.CompletedTask;
	}

	public ValueTask DisposeAsync()
	{
		KeyCodeService.UnregisterListener(OnKeyDownAsync);
		return ValueTask.CompletedTask;
	}
}