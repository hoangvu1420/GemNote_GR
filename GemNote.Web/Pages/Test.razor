@page "/test"

<PageTitle>Test</PageTitle>

@inject IDialogService DialogService
@inject IToastService ToastService
@inject IJSRuntime JsRuntime

<style>
	.card {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.demopanel {
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
	}
        .demopanel textarea {
            width: 100%;
            background: #333333;
            color: white;
            text-align: center;
            border: none;
            font-size: 1rem;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
</style>

<FluentStack Style="width: 100%;">
	<FluentSplitter Orientation="Orientation.Horizontal" Panel1Size="25%" Style="width: 100%;">
		<Panel1>
			<div class="demopanel">
				<textarea @ref="_frontTextarea" @bind="FrontContent" @oninput="HandleFrontInput" @onblur="HandleFrontContentChange" spellcheck="false" rows="6"></textarea>
			</div>
		</Panel1>
		<Panel2>
			<div class="demopanel">
				<textarea @ref="_backTextarea" @bind="BackContent" @oninput="HandleBackInput" @onblur="HandleBackContentChange" spellcheck="false" rows="6"></textarea>
			</div>
		</Panel2>
	</FluentSplitter>
	<FluentButton Title="Delete">
		<FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="Color.Error"/>
	</FluentButton>
</FluentStack>

@code {
	private string FrontContent { get; set; } = string.Empty;
	private string BackContent { get; set; } = string.Empty;

	private ElementReference _frontTextarea;
	private ElementReference _backTextarea;

	private async void HandleFrontContentChange(FocusEventArgs e)
	{
		// Handle the content change when the text area loses focus
		await JsRuntime.InvokeVoidAsync("logger.info", FrontContent);
	}

	private async void HandleBackContentChange(FocusEventArgs e)
	{
		// Handle the content change when the text area loses focus
		await JsRuntime.InvokeVoidAsync("logger.info", BackContent);
	}

	private async Task HandleFrontInput(ChangeEventArgs e)
	{
		await JsRuntime.InvokeVoidAsync("editorInterop.autoExpand", _frontTextarea);
	}

	private async Task HandleBackInput(ChangeEventArgs e)
	{
		await JsRuntime.InvokeVoidAsync("editorInterop.autoExpand", _backTextarea);
	}
}