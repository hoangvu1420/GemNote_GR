@using GemNote.Web.ViewModels.NotebookViewModels
@using GemNote.Web.ViewModels.SectionViewModels
@using GemNote.Web.Services.Contracts
@using GemNote.Web.Services.Implementations
@using GemNote.Web.States
@using Newtonsoft.Json
@using System.Net
@using GemNote.Web.Components.SectionComponents

@inject IToastService ToastService
@inject IDialogService DialogService

@inject NavigationManager NavigationManager
@inject UserState UserState
@inject ISectionService SectionService

<style>
	.container {
		width: 100%;
		margin: 10px auto;
	}

	.acc-header {
		margin: 0 10px;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.acc-header-left {
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		align-items: flex-start;
	}

	.acc-header-right {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.top-bar {
		margin-top: 0.5rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}
</style>

<div class="container">
	<FluentAccordionItem ExpandedChanged="OnExpanded">
		<HeadingTemplate>
			<div class="acc-header">
				<div class="acc-header-left">
					<FluentLabel Typo="Typography.H4" Color="Color.Accent" Style="margin-bottom: 5px;">
						@(Notebook.Name)
					</FluentLabel>
					<FluentBadge Appearance="Appearance.Accent">
						@(Notebook.Category)
					</FluentBadge>
					<FluentLabel Typo="Typography.Body">
						@(Notebook.Description ?? "No description")
					</FluentLabel>
				</div>
				<div class="acc-header-right">
					<FluentStack>
						<FluentLabel Typo="Typography.Body">
							@(Notebook.SectionQty > 0 ? Notebook.SectionQty + " sections" : "No sections")
						</FluentLabel>
					</FluentStack>
				</div>
			</div>
		</HeadingTemplate>
		<ChildContent>
			<FluentStack HorizontalAlignment="HorizontalAlignment.Right" Style="margin-bottom: 0.5rem;">
				<FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())"
				              Appearance="Appearance.Neutral"
				              Title="Edit"
				              OnClick="HandleEdit">
				</FluentButton>

				<FluentButton Title="Delete" OnClick="HandleDelete">
					<FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error"/>
				</FluentButton>
			</FluentStack>

			<div class="top-bar">
				<FluentLabel Typo="Typography.H5">
					@_message
				</FluentLabel>
				<FluentButton IconStart="@(new Icons.Regular.Size16.AddSquareMultiple())"
				              Appearance="Appearance.Accent"
				              Class="top-btn"
				              OnClick="OpenCreateSectionDialogAsync">
					Create new section
				</FluentButton>
			</div>

			@foreach (var section in Sections)
			{
				<SectionComp Section="section"
				             OnEdit="HandleEditSection"
				             OnDelete="HandleDeleteSection"/>
			}
		</ChildContent>
	</FluentAccordionItem>
</div>

@code {
	[Parameter] public NotebookVm Notebook { get; set; }
	[Parameter] public EventCallback<NotebookVm> OnEdit { get; set; }
	[Parameter] public EventCallback<NotebookVm> OnDelete { get; set; }

	public IEnumerable<SectionVm?> Sections { get; set; } = new List<SectionVm?>();
	private string _message = string.Empty;

	private async Task OnExpanded(bool expanded)
	{
		if (expanded)
		{
			// Load sections
			var (response, statusCode) = await SectionService.GetSectionsByNotebookIdAsync(Notebook.Id);

			switch (statusCode)
			{
				case HttpStatusCode.Unauthorized:
					var dialog401 = await DialogService.ShowErrorAsync("You are not authorized to access this page.");
					await dialog401.Result;
					NavigationManager.NavigateTo("/");
					break;
				case HttpStatusCode.Forbidden:
					var dialog403 = await DialogService.ShowErrorAsync("You are not allowed to access this page.");
					await dialog403.Result;
					NavigationManager.NavigateTo("/");
					break;
			}

			if (response.IsSucceed)
			{
				Sections = JsonConvert.DeserializeObject<List<SectionVm>>(response.Data!.ToString()!) ?? [];
				_message = $"This notebook has {Sections.Count()} sections.";
			}
			else
			{
				_message = "You don't have any sections yet. Create one now! :)";
			}
		}
	}

	private void HandleEdit()
	{
		if (OnEdit.HasDelegate)
		{
			OnEdit.InvokeAsync(Notebook);
		}
	}

	private async void HandleDelete()
	{
		if (OnDelete.HasDelegate)
		{
			await OnDelete.InvokeAsync(Notebook);
		}
	}

	private async Task OpenCreateSectionDialogAsync()
	{
		var section = new CreateSectionVm();

		var dialog = await DialogService.ShowDialogAsync<CreateSectionComp>(section, new DialogParameters()
		{
			Title = $"New section in {Notebook.Name}",
			OnDialogResult = DialogService.CreateDialogCallback(this, HandleCreateDialog),
			Width = "500px",
			Height = "fit-content",
			TrapFocus = true,
			Modal = true
		});
		await dialog.Result;
	}

	private async Task HandleCreateDialog(DialogResult result)
	{
		if (result.Cancelled)
		{
			ToastService.ShowError("Dialog cancelled");
			return;
		}

		if (result.Data is not null)
		{
			CreateSectionVm createSectionVm = (result.Data as CreateSectionVm)!;
			createSectionVm.NotebookId = Notebook.Id;

			var (response, statusCode) = await SectionService.CreateSectionAsync(createSectionVm);

			switch (statusCode)
			{
				case HttpStatusCode.Unauthorized:
					var dialog401 = await DialogService.ShowErrorAsync("You are not authorized to access this page.");
					await dialog401.Result;
					NavigationManager.NavigateTo("/");
					break;
				case HttpStatusCode.Forbidden:
					var dialog403 = await DialogService.ShowErrorAsync("You are not allowed to access this page.");
					await dialog403.Result;
					NavigationManager.NavigateTo("/");
					break;
			}

			if (response.IsSucceed)
			{
				Sections = Sections.Append(JsonConvert.DeserializeObject<SectionVm>(response.Data!.ToString()!));
				ToastService.ShowSuccess("Section created successfully");
			}
			else
			{
				ToastService.ShowError("Failed to create section");
			}
		}
	}

	private async Task HandleEditSection(SectionVm section)
	{
		var input = new CreateSectionVm()
		{
			Name = section.Name,
			Description = section.Description
		};
		var dialog = await DialogService.ShowDialogAsync<CreateSectionComp>(input, new DialogParameters()
		{
			Title = "Edit section",
			Width = "500px",
			Height = "fit-content",
			TrapFocus = true,
			Modal = true
		});
		var result = await dialog.Result;

		if (result is { Cancelled: false, Data: not null })
		{
			var createSectionVm = (result.Data as CreateSectionVm)!;
			var updateSectionVm = new UpdateSectionVm
			{
				Id = section.Id,
				Name = createSectionVm.Name,
				Description = createSectionVm.Description
			};

			var (response, statusCode) = await SectionService.UpdateSectionAsync(updateSectionVm);

			switch (statusCode)
			{
				case HttpStatusCode.Unauthorized:
					var dialog401 = await DialogService.ShowErrorAsync("You are not authorized to access this page.");
					await dialog401.Result;
					NavigationManager.NavigateTo("/");
					break;
				case HttpStatusCode.Forbidden:
					var dialog403 = await DialogService.ShowErrorAsync("You are not allowed to access this page.");
					await dialog403.Result;
					NavigationManager.NavigateTo("/");
					break;
			}

			if (response.IsSucceed)
			{
				var index = Sections.ToList().FindIndex(n => n!.Id == section.Id);
				var updatedSection = JsonConvert.DeserializeObject<SectionVm>(response.Data!.ToString()!);

				Sections = Sections.Select((n, i) => i == index ? updatedSection : n).ToList();
				ToastService.ShowSuccess("Section updated successfully");
			}
			else
			{
				ToastService.ShowError("Failed to update section");
			}
		}
	}

	private async Task HandleDeleteSection(SectionVm section)
	{
		var dialog = await DialogService.ShowConfirmationAsync("Are you sure you want to delete this section");
		var result = await dialog.Result;

		if (!result.Cancelled)
		{
			var (response, statusCode) = await SectionService.DeleteSectionAsync(section.Id);

			switch (statusCode)
			{
				case HttpStatusCode.Unauthorized:
					var dialog401 = await DialogService.ShowErrorAsync("You are not authorized to access this page.");
					await dialog401.Result;
					NavigationManager.NavigateTo("/");
					break;
				case HttpStatusCode.Forbidden:
					var dialog403 = await DialogService.ShowErrorAsync("You are not allowed to access this page.");
					await dialog403.Result;
					NavigationManager.NavigateTo("/");
					break;
			}

			if (response.IsSucceed)
			{
				Sections = Sections.Where(n => n!.Id != section.Id).ToList();
				ToastService.ShowSuccess("Section deleted successfully");
			}
			else
			{
				ToastService.ShowError("Failed to delete section");
			}
		}
	}

}