@using GemNote.Web.ViewModels.SectionViewModels
@using GemNote.Web.ViewModels.UnitViewModels
@using GemNote.Web.Services.Contracts
@using Newtonsoft.Json
@using System.Net
@using GemNote.Web.Components.UnitComponents
@using System.Diagnostics

@inject IJSRuntime JsRuntime

@inject IToastService ToastService
@inject IDialogService DialogService

@inject IUnitService UnitService
@inject NavigationManager NavigationManager

<style>
	.container {
		width: 100%;
		margin: 5px auto;
	}

	.acc-header {
		margin: 0 10px;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.acc-header-left {
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		align-items: flex-start;
	}

	.acc-header-right {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.top-bar {
		margin-top: 0.5rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}
</style>

<div class="container">
	<FluentAccordionItem ExpandedChanged="OnExpanded">
		<HeadingTemplate>
			<div class="acc-header">
				<div class="acc-header-left">
					<FluentLabel Typo="Typography.H4" Color="Color.Accent" Style="margin-bottom: 5px;">
						@(Section.Name)
					</FluentLabel>
					<FluentLabel Typo="Typography.Body">
						@(Section.Description ?? "No description")
					</FluentLabel>
				</div>
				<div class="acc-header-right">
					<FluentStack>
						<FluentLabel Typo="Typography.Body">
							@(Section.UnitQty > 0 ? Section.UnitQty + " units" : "No units")
						</FluentLabel>
					</FluentStack>
				</div>
			</div>
		</HeadingTemplate>
		<ChildContent>
			<FluentStack HorizontalAlignment="HorizontalAlignment.Right" Style="margin-bottom: 0.5rem;">
				<FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())"
				              Appearance="Appearance.Neutral"
				              Title="Edit"
				              OnClick="HandleEdit">
				</FluentButton>

				<FluentButton Title="Delete" OnClick="HandleDelete">
					<FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error"/>
				</FluentButton>
			</FluentStack>
			@if (_isLoading)
			{
				<FluentStack Orientation="Orientation.Horizontal" Style="margin-top: 1rem;">
					<FluentLabel Typo="Typography.H5">
						Loading units...
					</FluentLabel>
					<FluentProgressRing></FluentProgressRing>
				</FluentStack>
			}
			else
			{
				<div class="top-bar">
					<FluentLabel Typo="Typography.H5">
						@_message
					</FluentLabel>
					<FluentButton IconStart="@(new Icons.Regular.Size16.AddSquareMultiple())"
					              Appearance="Appearance.Accent"
					              Class="top-btn"
					              OnClick="OpenCreateUnitDialogAsync">
						Add unit
					</FluentButton>
				</div>

				<FluentNavMenu>
					@foreach (var unit in Units)
					{
						<FluentNavLink Href="@($"/units/{unit?.Id.ToString()}")" Icon="@(new Icons.Regular.Size24.Bookmark())">
							<FluentStack>
								<FluentLabel Typo="Typography.H5">
									@(unit?.Name)
								</FluentLabel>
								<FluentSpacer/>
								<FluentLabel Typo="Typography.Body">
									@(unit?.CardQty) flashcards
								</FluentLabel>
							</FluentStack>
						</FluentNavLink>
					}
				</FluentNavMenu>
			}

		</ChildContent>
	</FluentAccordionItem>
</div>

@code {
	[Parameter] public SectionVm Section { get; set; } = null!;
	[Parameter] public EventCallback<SectionVm> OnEdit { get; set; }
	[Parameter] public EventCallback<SectionVm> OnDelete { get; set; }

	public IEnumerable<UnitVm?> Units { get; set; } = [];
	private bool _isLoading = false;
	private string _message = string.Empty;

	private async void OnExpanded(bool expanded)
	{
		if (expanded)
		{
			_isLoading = true;
			StateHasChanged();

			// Load Units
			var (response, statusCode) = await UnitService.GetUnitsBySectionIdAsync(Section.Id);

			switch (statusCode)
			{
				case HttpStatusCode.Unauthorized:
					var dialog401 = await DialogService.ShowErrorAsync("You are not authorized to access this page.");
					await dialog401.Result;
					NavigationManager.NavigateTo("/");
					break;
				case HttpStatusCode.Forbidden:
					var dialog403 = await DialogService.ShowErrorAsync("You are not allowed to access this page.");
					await dialog403.Result;
					NavigationManager.NavigateTo("/");
					break;
			}

			if (response.IsSucceed)
			{
				Units = JsonConvert.DeserializeObject<List<UnitVm>>(response.Data!.ToString()!) ?? [];
				_message = $"This section has {Units.Count()} units.";
			}
			else
			{
				_message = "This section has no unit.";
			}

			await JsRuntime.InvokeVoidAsync("logger.object", Units);

			// stimulate 500ms loading
			await Task.Delay(500);

			_isLoading = false;
			StateHasChanged();
		}
	}

	private void HandleEdit()
	{
		if (OnEdit.HasDelegate)
		{
			OnEdit.InvokeAsync(Section);
		}
	}

	private async void HandleDelete()
	{
		if (OnDelete.HasDelegate)
		{
			await OnDelete.InvokeAsync(Section);
		}
	}

	private async Task OpenCreateUnitDialogAsync()
	{
		var unit = new CreateUnitVm();

		var dialog = await DialogService.ShowDialogAsync<CreateUnitComp>(unit, new DialogParameters()
		{
			Title = $"New unit in {Section.Name}",
			OnDialogResult = DialogService.CreateDialogCallback(this, HandleCreateDialog),
			Width = "500px",
			Height = "fit-content",
			TrapFocus = true,
			Modal = true
		});
		await dialog.Result;
	}

	private async Task HandleCreateDialog(DialogResult result)
	{
		if (result.Cancelled)
		{
			ToastService.ShowError("Dialog cancelled");
			return;
		}

		if (result.Data is not null)
		{
			CreateUnitVm createUnitVm = (result.Data as CreateUnitVm)!;
			createUnitVm.SectionId = Section.Id;

			await JsRuntime.InvokeVoidAsync("logger.object", createUnitVm);
			var (response, statusCode) = await UnitService.CreateUnitAsync(createUnitVm);
			await JsRuntime.InvokeVoidAsync("logger.object", response);

			switch (statusCode)
			{
				case HttpStatusCode.Unauthorized:
					var dialog401 = await DialogService.ShowErrorAsync("You are not authorized to access this page.");
					await dialog401.Result;
					NavigationManager.NavigateTo("/");
					break;
				case HttpStatusCode.Forbidden:
					var dialog403 = await DialogService.ShowErrorAsync("You are not allowed to access this page.");
					await dialog403.Result;
					NavigationManager.NavigateTo("/");
					break;
			}

			if (response.IsSucceed)
			{
				Units = Units.Append(JsonConvert.DeserializeObject<UnitVm>(response.Data!.ToString()!));
				ToastService.ShowSuccess("Unit created successfully");
			}
			else
			{
				ToastService.ShowError("Failed to create unit");
			}
		}
	}

}